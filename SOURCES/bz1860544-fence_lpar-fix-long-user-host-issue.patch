From 3424464d3e447308f171399302cf76eb573a618f Mon Sep 17 00:00:00 2001
From: Reid wahl <nrwahl@protonmail.com>
Date: Fri, 24 Jul 2020 18:22:24 -0700
Subject: [PATCH] fence_lpar: Fix parse error from long command line

When Pacemaker executes `fence_lpar` and the HMC command line is greater
than 80 characters, a parse error causes agent failure. This can happen
with a long user name and/or long managed system name. It happens only
when Pacemaker spawns the `fence_lpar` process; it does not happen when
`fence_lpar` is run from the CLI.

A long command line gets a carriage return ('\r') added at the 80
character mark and wraps back to the beginning of the line with no line
feed ('\n'), overwriting the displayed characters. `fence_lpar`'s regex
matches handle this fine when it's run from the command line.

The problem is that when Pacemaker spawns fence_lpar, **for some
reason** there are backspace characters in the buffer when we hit the
'\r' character. This seems to overwrite some of the `conn.before`
string. As a result, the regex doesn't match `conn.before`, and the
agent fails.

This patch works around the `conn.before` weirdness by reading and
discarding the first received line **before** any regex processing.

Resolves: RHBZ#1860544
Resolves: RHBZ#1860545

Signed-off-by: Reid Wahl <nrwahl@protonmail.com>
---
 agents/lpar/fence_lpar.py | 33 +++++++++++++++++++++++++++------
 1 file changed, 27 insertions(+), 6 deletions(-)

diff --git a/agents/lpar/fence_lpar.py b/agents/lpar/fence_lpar.py
index 270bbe3b..9dfabc43 100644
--- a/agents/lpar/fence_lpar.py
+++ b/agents/lpar/fence_lpar.py
@@ -19,6 +19,9 @@
 def get_power_status(conn, options):
 	if options["--hmc-version"] == "3":
 		conn.send("lssyscfg -r lpar -m " + options["--managed"] + " -n " + options["--plug"] + " -F name,state\n")
+
+		# First line (command) may cause parsing issues if long
+		conn.readline()
 		conn.log_expect(options["--command-prompt"], int(options["--power-timeout"]))
 
 		try:
@@ -29,6 +32,9 @@ def get_power_status(conn, options):
 	elif options["--hmc-version"] in ["4", "IVM"]:
 		conn.send("lssyscfg -r lpar -m "+ options["--managed"] +
 				" --filter 'lpar_names=" + options["--plug"] + "'\n")
+
+		# First line (command) may cause parsing issues if long
+		conn.readline()
 		conn.log_expect(options["--command-prompt"], int(options["--power-timeout"]))
 
 		try:
@@ -49,6 +55,9 @@ def set_power_status(conn, options):
 	if options["--hmc-version"] == "3":
 		conn.send("chsysstate -o " + options["--action"] + " -r lpar -m " + options["--managed"]
 			+ " -n " + options["--plug"] + "\n")
+
+		# First line (command) may cause parsing issues if long
+		conn.readline()
 		conn.log_expect(options["--command-prompt"], int(options["--power-timeout"]))
 	elif options["--hmc-version"] in ["4", "IVM"]:
 		if options["--action"] == "on":
@@ -60,17 +69,23 @@ def set_power_status(conn, options):
 		else:
 			conn.send("chsysstate -o shutdown -r lpar --immed" +
 				" -m " + options["--managed"] + " -n " + options["--plug"] + "\n")
+
+		# First line (command) may cause parsing issues if long
+		conn.readline()
 		conn.log_expect(options["--command-prompt"], int(options["--power-timeout"]))
 
 def get_lpar_list(conn, options):
 	outlets = {}
 	if options["--hmc-version"] == "3":
 		conn.send("query_partition_names -m " + options["--managed"] + "\n")
+
+		## We have to remove first line (command)
+		conn.readline()
 		conn.log_expect(options["--command-prompt"], int(options["--power-timeout"]))
 
-		## We have to remove first 3 lines (command + header) and last line (part of new prompt)
+		## We have to remove next 2 lines (header) and last line (part of new prompt)
 		####
-		res = re.search("^.+?\n(.+?\n){2}(.*)\n.*$", conn.before, re.S)
+		res = re.search("^(.+?\n){2}(.*)\n.*$", conn.before, re.S)
 
 		if res == None:
 			fail_usage("Unable to parse output of list command")
@@ -81,11 +96,14 @@ def get_lpar_list(conn, options):
 	elif options["--hmc-version"] == "4":
 		conn.send("lssyscfg -r lpar -m " + options["--managed"] +
 			" -F name:state\n")
+
+		## We have to remove first line (command)
+		conn.readline()
 		conn.log_expect(options["--command-prompt"], int(options["--power-timeout"]))
 
-		## We have to remove first line (command) and last line (part of new prompt)
+		## We have to remove last line (part of new prompt)
 		####
-		res = re.search("^.+?\n(.*)\n.*$", conn.before, re.S)
+		res = re.search("^(.*)\n.*$", conn.before, re.S)
 
 		if res == None:
 			fail_usage("Unable to parse output of list command")
@@ -100,11 +118,14 @@ def get_lpar_list(conn, options):
 	elif options["--hmc-version"] == "IVM":
 		conn.send("lssyscfg -r lpar -m " + options["--managed"] +
 			" -F name,state\n")
+
+		## We have to remove first line (command)
+		conn.readline()
 		conn.log_expect(options["--command-prompt"], int(options["--power-timeout"]))
 
-		## We have to remove first line (command) and last line (part of new prompt)
+		## We have to remove last line (part of new prompt)
 		####
-		res = re.search("^.+?\n(.*)\n.*$", conn.before, re.S)
+		res = re.search("^(.*)\n.*$", conn.before, re.S)
 
 		if res == None:
 			fail_usage("Unable to parse output of list command")
